spring.application.name = novel_web
server.servlet.context-path = /novel_web
spring.http.encoding.enabled = true
spring.http.encoding.charset = UTF-8
spring.http.encoding.force = true

spring.main.allow-bean-definition-overriding = true
mybatis.configuration.map-underscore-to-camel-case = true

#1. \u5B9A\u4E49\u591A\u4E2A\u6570\u636E\u6E90
spring.shardingsphere.datasource.names = m1,s1,db1

#\u4E3B\u5E93\u6570\u636E\u6E90
spring.shardingsphere.datasource.m1.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name = com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m1.url = jdbc:mysql://192.168.10.128:3306/lg_novel_db?characterEncoding=UTF-8&useSSL=false
spring.shardingsphere.datasource.m1.username = root
spring.shardingsphere.datasource.m1.password = ZeNian@666

#\u4ECE\u5E93\u6570\u636E\u6E90
spring.shardingsphere.datasource.s1.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.s1.driver-class-name = com.mysql.jdbc.Driver
spring.shardingsphere.datasource.s1.url = jdbc:mysql://192.168.10.129:3306/lg_novel_db?characterEncoding=UTF-8&useSSL=false
spring.shardingsphere.datasource.s1.username = root
spring.shardingsphere.datasource.s1.password = ZeNian@666

#\u6C34\u5E73\u5206\u8868\u6570\u636E\u6E90
spring.shardingsphere.datasource.db1.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.db1.driver-class-name = com.mysql.jdbc.Driver
spring.shardingsphere.datasource.db1.url = jdbc:mysql://192.168.10.128:3306/lg_user_db?characterEncoding=UTF-8&useSSL=false
spring.shardingsphere.datasource.db1.username = root
spring.shardingsphere.datasource.db1.password = ZeNian@666

#2. \u5B9A\u4E49\u8BFB\u5199\u5206\u79BB \u4E3B\u5E93\u4E0E\u4ECE\u5E93\u7684\u4FE1\u606F
spring.shardingsphere.sharding.master-slave-rules.ms.master-data-source-name=m1
spring.shardingsphere.sharding.master-slave-rules.ms.slave-data-source-names=s1

#3. \u914D\u7F6E\u8BFB\u5199\u5206\u79BB\u7684 \u6570\u636E\u8282\u70B9
spring.shardingsphere.sharding.tables.novel.actual-data-nodes = ms.novel

#4. \u914D\u7F6Euser_db\u6570\u636E\u5E93\u7684\u6C34\u5E73\u5206\u8868\u6570\u636E\u8282\u70B9,\u6307\u5B9A\u8282\u70B9\u7684\u4FE1\u606F
spring.shardingsphere.sharding.tables.users.actual-data-nodes = db1.users_$->{1..2}

#5. \u6307\u5B9Ausers\u8868 (\u903B\u8F91\u8868)\u7684\u4E3B\u952E\u751F\u6210\u7B56\u7565\u4E3A SNOWFLAKE
spring.shardingsphere.sharding.tables.users.key-generator.column=id
spring.shardingsphere.sharding.tables.users.key-generator.type=SNOWFLAKE

#6. \u6307\u5B9A\u5206\u7247\u7B56\u7565, \u5206\u7247\u7B56\u7565\u5305\u542B\u5206\u7247\u952E\u548C\u5206\u7247\u7B97\u6CD5
spring.shardingsphere.sharding.tables.users.table-strategy.inline.sharding-column = id
spring.shardingsphere.sharding.tables.users.table-strategy.inline.algorithm-expression = users_$->{id % 2 + 1}

#7. \u6307\u5B9Asys_region\u4E3A\u516C\u5171\u8868
spring.shardingsphere.sharding.broadcast-tables=sys_region

#8. \u516C\u5171\u8868\u4E3B\u952E\u751F\u6210\u7B56\u7565
spring.shardingsphere.sharding.tables.sys_region.key-generator.column=id
spring.shardingsphere.sharding.tables.sys_region.key-generator.type=SNOWFLAKE

# \u6253\u5F00sql\u8F93\u51FA\u65E5\u5FD7
spring.shardingsphere.props.sql.show = true










